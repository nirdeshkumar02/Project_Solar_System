name: Solar System Workflow

on:
  workflow_dispatch: null
  push:
    branches:
      - main
      - feature/*

env:
  # Mongo Vars
  MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
  MONGO_CLOUD: ${{vars.MONGO_CLOUD}}
  DB_NAME: ${{vars.DB_NAME}}
  # Docker Vars
  DOCKER_USER: ${{ vars.DOCKER_USER }}
  DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
  DOCKER_IMAGE: ${{ vars.DOCKER_IMAGE }}

jobs:
  unit-testing:
    name: Unit Testing
    strategy:
      matrix:
        node_version: [18, 20]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: SetUp NodeJs Version ${{ matrix.node_version }} on ${{ matrix.os }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}

      - name: Caching NPM Dependencies to speed up workflow
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Installing Project Dependencies
        run: npm install

      - name: Unit Testing
        id: unit_test   # It will be helpful when we want to executed next step based on output of this step. 
        run: npm test

      # we want this step should execute whether above unit testing step failed or success; We can use either If expression or continue-on-error
      # You can take ref of previous step by using steps.<id>
    #   Difference between If: always() and continue-on-error :
        # continue-on-error: won't mark the workflow failed if the associated step is failed. Workflow will be continue
        # WhereAs If: always() will mark the workflow failed but the associated step will run. 
      - name: Archiving Test Files
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: Mocha-Test-Result
          path: test-results.xml
          retention-days: 5

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: SetUp NodeJs Version - 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Caching NPM Dependencies to speed up workflow
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Installing Project Dependencies
        run: npm install

      # As Code Coverage will failed coz it required 90% but we got 89%;
      # But We don't want to stop the execution if this step failed.
      # So we can use continue-on-error or if expression
      - name: Checking Code Coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archiving Coverage Files
        uses: actions/upload-artifact@v3
        with:
          name: Coverage-Test-Results
          path: coverage
          retention-days: 5

  containerization:
    name: Containerization of Application
    runs-on: ubuntu-latest
    needs: [unit-testing, code-coverage]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ env.DOCKER_PASS }}

      - name: Build Application Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.DOCKER_USER }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      - name: Test Application Docker Image
        run: |-
            docker images
            docker run -d --name solarsystem \
              -p 3000:3000 \
              -e MONGO_USERNAME=MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              -e MONGO_CLOUD=$MONGO_CLOUD \
              -e DB_NAME=$DB_NAME \
              ${{ env.DOCKER_USER }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'solar-system-app)
            echo $IP
            echo "........Testing Image URL using wget.........."
            wget -q -O - 127.0.0.1:3000/live | grep live
