name: Solar System Workflow

on:
  workflow_dispatch: null
  push:
    branches:
      - main
      - feature/*

env:
  # PROD Mongo Vars
  MONGO_URI: ${{ vars.MONGO_URI }}
  MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}

  # Docker Vars
  DOCKER_USER: ${{ vars.DOCKER_USER }}
  DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
  DOCKER_IMAGE: ${{ vars.DOCKER_IMAGE }}


  
jobs:
  unit-testing:
    name: Unit Testing
    strategy:
      matrix:
        node_version: [18, 20]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: SetUp NodeJs Version ${{ matrix.node_version }} on ${{ matrix.os }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}

      - name: Caching NPM Dependencies to speed up workflow
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Installing Project Dependencies
        run: npm install

      - name: Unit Testing
        id: unit_test # It will be helpful when we want to executed next step based on output of this step.
        run: npm test

      # we want this step should execute whether above unit testing step failed or success; We can use either If expression or continue-on-error
      # You can take ref of previous step by using steps.<id>
      # Difference between If: always() and continue-on-error :
      # continue-on-error: won't mark the workflow failed if the associated step is failed. Workflow will be continue
      # WhereAs If: always() will mark the workflow failed but the associated step will run.
      - name: Archiving Test Files
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          name: Mocha-Test-Result
          path: test-results.xml
          retention-days: 5

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: SetUp NodeJs Version - 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Caching NPM Dependencies to speed up workflow
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Installing Project Dependencies
        run: npm install

      # As Code Coverage will failed coz it required 90% but we got 89%;
      # But We don't want to stop the execution if this step failed.
      # So we can use continue-on-error or if expression
      - name: Checking Code Coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archiving Coverage Files
        uses: actions/upload-artifact@v3
        with:
          name: Coverage-Test-Results
          path: coverage
          retention-days: 5

  upload-reports-to-s3:
    name: Test Reports require upload to s3
    runs-on: ubuntu-latest
    needs: [code-coverage, unit-testing]
    continue-on-error: true
    steps:
      - name: Download Test Artifacts
        uses: actions/download-artifact@v3
        with:
          name: Coverage-Test-Results

      - name: Download Coverage Artifacts
        uses: actions/download-artifact@v3
        with:
          name: Mocha-Test-Result

      - name: Merging Above Artifacts in single folder
        run: |-
          echo ".... Listing Files ..."
          ls -ltr
          echo "... Creating Folder ..."
          mkdir reports-${{ github.sha }}
          echo "... Moving Files to Folders ..."
          mv test-results.xml reports-${{ github.sha }}
          mv cobertura-coverage.xml reports-${{ github.sha }}
          echo "... Listing New Folders Files ..."
          ls -ltr reports-${{ github.sha }}

      - name: Upload Folder to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: solar-system-reports-bucket
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'
          SOURCE_DIR: 'reports-${{ github.sha }}'
          DEST_DIR: 'reports-${{ github.sha }}'
          

  docker:
    name: Containerization of Application
    runs-on: ubuntu-latest
    needs: [unit-testing, code-coverage]
    permissions: # To push image on Github Container Registry; By Default we have read permission includes in GITHUB_TOKEN
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ env.DOCKER_PASS }}

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Application Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.DOCKER_USER }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      - name: Test Application Docker Image
        run: |-
          docker images
          docker run -d --name solarsystem \
            -p 3000:3000 \
            -e MONGO_URI=${{ env.MONGO_URI }} \
            -e MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
            -e MONGO_PASSWORD=${{ env.MONGO_PASSWORD }} \
            ${{ env.DOCKER_USER }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          export IP=$(docker inspect solarsystem -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
          echo $IP
          echo "........Testing Image URL using wget.........."
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Push Application Docker Image to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_USER }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      - name: Push Application Docker Image to Github Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |-
            ${{ env.DOCKER_USER }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  dev-deploy:
    if: contains(github.ref, 'feature/')
    name: Deployed to Dev Enviroment
    needs: docker
    # It takes the ref of development/prod level envs for this job. 
    # You need to create ENV in github setting with their associated env
    # Like prod envs will be different from dev envs. 
    environment: 
      name: development
      url: https://${{ steps.set_ingress_host.outputs.APP_INGRESS_HOST }}
    # Output is helpfull in passing value from one job to another job
    outputs:
      APP_INGRESS_URL: ${{ steps.set_ingress_host.outputs.APP_INGRESS_HOST }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Kubectl CLI
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.26.0"

        # To deploy on k8s; Kubeconfig as github secret required
      - name: Set K8s Context with KubeConfig
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      # Fetching k8s ingress controller ip and saving to $GITHUB_ENV to use in furthur steps under same jobs.
      - name: Fetch and Save K8s Ingress Controller IP
        run: |-
          echo ".....Ingress Controller External IP....."
          echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

      - name: Replace envs in K8s Menifest files
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: "${"
          tokenSuffix: "}"
          files: '["kubernetes/development/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          K8S_IMAGE: ${{ env.DOCKER_USER }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          INGRESS_IP: ${{ env.INGRESS_IP }}

      - name: Check Deployment Files with ENVs Updates
        run: cat kubernetes/development/*.yaml

    # Here; you need to create tls self signed certficate for create below secret used in ingress service. 
      - name: Create Requierd Secrets 
        run: |-
          kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ env.MONGO_PASSWORD }}
          kubectl create secret tls ingress-local-tls \
            --namespace ${{ vars.NAMESPACE }} \
            --key server.key \
            --cert server.crt
      
      - name: Deploy menifests files to dev env
        run: |-
          kubectl apply -f kubernetes/development

      - name: Set Ingress Endpoint for Application
        id: set_ingress_host
        run: |-
          echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> $GITHUB_OUTPUT
 
  dev-integration-testing:
    if: contains(github.ref, 'feature/')
    name: Dev Integration Testing
    needs: dev-deploy
    runs-on: ubuntu-latest
    # Taking value from earlier job
    env:
      URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
    steps:
      - name: Test URL Output using CURL and JQ
        run: |-
          echo $URL 
          echo "......................"
          curl https://$URL/live -s -k | jq -r .status | grep -i live

  prod-deploy:
    if: github.ref == 'refs/heads/main'
    name: Deployed to Production Env
    needs: docker
    # It takes the ref of development/prod level envs for this job. 
    # You need to create ENV in github setting with their associated env
    # Like prod envs will be different from dev envs. 
    environment: 
      name: production
      url: https://${{ steps.set_ingress_host.outputs.APP_INGRESS_HOST }}
    # Output is helpfull in passing value from one job to another job
    outputs:
      APP_INGRESS_URL: ${{ steps.set_ingress_host.outputs.APP_INGRESS_HOST }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Kubectl CLI
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.26.0"

        # To deploy on k8s; Kubeconfig as github secret required
      - name: Set K8s Context with KubeConfig
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      # Fetching k8s ingress controller ip and saving to $GITHUB_ENV to use in furthur steps under same jobs.
      - name: Fetch and Save K8s Ingress Controller IP
        run: |-
          echo ".....Ingress Controller External IP....."
          echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

      - name: Replace envs in K8s Menifest files
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: "${"
          tokenSuffix: "}"
          files: '["kubernetes/production/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          K8S_IMAGE: ${{ env.DOCKER_USER }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          INGRESS_IP: ${{ env.INGRESS_IP }}

      - name: Check Deployment Files with ENVs Updates
        run: cat kubernetes/production/*.yaml

    # Here; you need to create tls self signed certficate for create below secret used in ingress service. 
      - name: Create Required Secrets 
        run: |-
          kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ env.MONGO_PASSWORD }}
          kubectl create secret tls ingress-local-tls \
            --namespace ${{ vars.NAMESPACE }} \
            --key server.key \
            --cert server.crt
      
      - name: Deploy menifests files to prod env
        run: |-
          kubectl apply -f kubernetes/production

      - name: Set Ingress Endpoint for Application
        id: set_ingress_host
        run: |-
          echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> $GITHUB_OUTPUT
 
  prod-integration-testing:
    if: github.ref == 'refs/heads/main'
    name: Prod Integration Testing
    needs: prod-deploy
    runs-on: ubuntu-latest
    # Taking value from earlier job
    env:
      URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL }}
    steps:
      - name: Test URL Output using CURL and JQ
        run: |-
          echo $URL 
          echo "......................"
          curl https://$URL/live -s -k | jq -r .status | grep -i live

  